name: Test Automation Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - marketplace
          - admin
          - api
          - e2e
          - integration

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies - Root
        run: pnpm install
      
      - name: Install dependencies - API
        working-directory: ./api
        run: pnpm install
      
      - name: Install dependencies - Admin App
        working-directory: ./admin-app
        run: pnpm install
      
      - name: Install dependencies - Test Automation
        working-directory: ./test-automation
        run: pnpm install
      
      - name: Install Playwright browsers
        working-directory: ./test-automation
        run: npx playwright install --with-deps
      
      - name: Setup test environment
        run: |
          cp .env.example .env.local
          cp api/.env.example api/.env
          cp admin-app/.env.example admin-app/.env
          cp test-automation/.env.test.example test-automation/.env.test
        continue-on-error: true
      
      - name: Build applications
        run: |
          pnpm build
          cd admin-app && pnpm build
      
      - name: Start services
        run: |
          cd api && pnpm start &
          cd admin-app && pnpm start &
          pnpm preview &
          sleep 10  # Wait for services to start
      
      - name: Run test suite
        working-directory: ./test-automation
        run: |
          if [ "${{ github.event.inputs.test_suite }}" = "" ]; then
            pnpm test:all --report
          else
            pnpm test:${{ github.event.inputs.test_suite }} --report
          fi
        env:
          TEST_ENV: ci
          MARKETPLACE_URL: http://localhost:5173
          ADMIN_URL: http://localhost:5174
          API_URL: http://localhost:8001
          TEST_DB_URI: mongodb://localhost:27017/junoauth-test
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            test-automation/reports/
            test-automation/coverage/
      
      - name: Upload Playwright traces
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-traces-${{ matrix.node-version }}
          path: test-automation/test-results/
      
      - name: Generate test report
        if: always()
        working-directory: ./test-automation
        run: pnpm report:generate
      
      - name: Publish test results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Test Results (Node ${{ matrix.node-version }})
          path: 'test-automation/reports/junit.xml'
          reporter: java-junit
          fail-on-error: false
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'test-automation/reports/test-report-latest.json';
            
            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              const summary = report.summary;
              
              const comment = `## üß™ Test Automation Results
              
              **Node Version:** ${{ matrix.node-version }}
              **Environment:** ${{ github.event_name }}
              
              ### Summary
              - ‚úÖ Passed: ${summary.passed}
              - ‚ùå Failed: ${summary.failed}
              - üìä Pass Rate: ${summary.passRate}
              
              [View full report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
  
  coverage:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          name: test-results-18.x
          path: test-results
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./test-results/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false